package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_16234_인구이동_JH {

	static int N, L, R;
	static int arr[][];
	static int[] dx = {-1, 1, 0, 0};  // 상, 하, 좌, 우
	static int[] dy = {0, 0, -1, 1};	
	static int cnt; // 인구이동 횟수
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		arr = new int[N][N];
		L = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		while(true) {
			int visited[][] = new int[N][N];
			int flag = 0; // 더이상 인구이동을 할 수없다면 그대로 0
			for(int a = 0; a < N; a++) {
				for(int b = 0; b < N; b++) {
					if(visited[a][b]==0) {
						ArrayList<Point> al = new ArrayList<>();  // 평균위함
						Queue<Integer> queue = new LinkedList<Integer>();
						queue.add(a);
						queue.add(b);
						queue.add(arr[a][b]);
						int sum = arr[a][b];
						al.add(new Point(a,b));
						visited[a][b] = 1;
						while(!queue.isEmpty()) {
							int x = queue.poll();
							int y = queue.poll();
							int num = queue.poll();
							for(int i = 0; i < 4; i++) {
								int nx = x + dx[i];
								int ny = y + dy[i];
								if(nx>=0 && nx < N && ny>=0 && ny < N && visited[nx][ny]==0) {  // 방문되지않았고
									int temp = Math.abs(num - arr[nx][ny]);  // 차이가
//									System.out.println("num:" + num + " arr:" + arr[nx][ny] + " temp:"+temp + " L : " + L + " R : " + R);
									if(temp >= L && temp <= R) {  // 범위내에 있다면
//										System.out.println(temp + " " + L + " " + R);
										flag = 1;  // 인구이동 가능
										visited[nx][ny] = 1;  // 방문처리
										queue.add(nx);
										queue.add(ny);
										queue.add(arr[nx][ny]);
										sum += arr[nx][ny];
										al.add(new Point(nx,ny));
									}
								}
							}
						}
//						System.out.println(al.size());
						if(al.size()>1) {	
							int avg = sum/al.size();
							for(Point p : al) {
								arr[p.x][p.y] = avg;
							}
//							for(int i = 0; i < N; i++) {  // 출력해봄
//								for(int j = 0; j < N; j++) {
//									System.out.print(arr[i][j] + " ");
//								}System.out.println();
//							}
						} 
					}
				}
			}
	
			if(flag==1) {  // 인구이동함
				cnt++;
			} else {  // 안함
				break;
			}
		}
		
		System.out.println(cnt);
	}
	
	public static class Point {
        int x; 
        int y;
        
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}
