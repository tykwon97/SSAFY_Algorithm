package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_16928_뱀과사다리게임_JH {

	static int N, M;
	static int[][] arr = new int[101][1];
	static int[] visited = new int[101];
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		int ans = 0;
		HashMap<Integer, Integer> snake = new HashMap<>();
		HashMap<Integer, Integer> ladder = new HashMap<>();
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int k = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			arr[k][0] = 1;
			snake.put(k, v);
		}
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int k = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			arr[k][0] = 2;
			ladder.put(k, v);
		}
		
		Queue<Integer> queue = new LinkedList<Integer>();
		queue.add(1);  // 번호
		queue.add(0);  // 횟수
        visited[1] = 1;
		while(!queue.isEmpty()) {
			int n = queue.poll();
			int cnt = queue.poll();
			if(n == 100) {  // 100도달!
				ans = cnt;
				break;
			}
			
			for(int i = 1; i <= 6; i++) {  // 주사위 굴림
				int nn = n+i;
                
				if(nn > 100) { // 바운더리 설정
					break;
				}
            
				if(visited[nn] == 0) {
				    visited[nn] = 1;
			    } else if(visited[nn] == 1)
				    continue;
               
				if(arr[nn][0] == 1) { // 뱀이 있다면
                    if(visited[snake.get(nn)]==0){
					    queue.add(snake.get(nn));
                        visited[snake.get(nn)] = 1;
//					System.out.println("key : " + nn + " , value : " + snake.get(nn));
					    queue.add(cnt+1);}
				} else if(arr[nn][0] == 2) {  // 사다리가 있다면
                    if(visited[ladder.get(nn)]==0){
					    queue.add(ladder.get(nn));
                        visited[ladder.get(nn)] = 1;
//					System.out.println("key : " + nn + " , value : " + ladder.get(nn));
					    queue.add(cnt+1);}	
				} else {
					queue.add(nn);
					queue.add(cnt+1);
				}
			}
		}
		
		System.out.println(ans);
	}
}
